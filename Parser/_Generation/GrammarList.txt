# Alfie's Standard Grammar.
#	You can get updates for this file from
#	Alfie's GitHub repos. Therefore, this file is not
#	specific to any launcher, including Alton.
#	A launcher developer is allowed to make modifications to
#	this file to amply with their launcher's parsing
#	capabilities, but the developer(s) shall remove or
#	replace this header or state their changes in the form
#	of comments if done so. Explicit exceptions to this rule
#	for specific non-terminals may be made in the form of
#	regular comments below.
#
#	Since Alton is supposed to work with a Canonical LR parser,
#	This grammar may not be supported by, for example an LL parser.
#	To address this, Alfie will try to keep this grammar fully
#	LL-compatible. if any rule is not LL-compatible, a public
#	standard defect shall be declared.
# Adapted from Alfie0x01 - Segment0x05.

start -> grammar_list

grammar_list -> grammar grammar_list
grammar_list -> grammar

grammar -> identifier oper_arrow product statement_end
grammar -> identifier oper_arrow statement_end

product -> identifier product
product -> identifier

# Example grammar
#	start -> expr start
#	start -> expr
#
#	expr -> B
#	expr -> expr A

# Example lex
#	B A A B

# Example of Bottom-Up Shift-reduce Left to right rightmost-deriative parsing
#		Stack		Lookahead		Future			Action
#	B			| A				| AB		|	expr -> B
#	expr		| A				| AB		|	Shift
#	expr A		| A				| B			|	expr -> expr A
#	expr		| A				| B			|	Shift
#	expr A		| B				| ...		|	expr -> expr A
#	expr		| B				| ...		|	Shift
#	expr B		| ...			| ...		|	expr -> B
#	expr expr	| ...			| ...		|	start -> expr
#	expr start	| ...			| ...		|	start -> expr start
#	start		| ...			| ...		|	Accept

# Example of Top-Down âˆž token lookahead Left to right Leftmost deriative parsing
#		Stack							Action
#	start						|	start -> expr start
#	expr start					|	expr -> expr A
#	expr A start				|	expr -> expr A
#	expr A A start				|	expr -> B
#	B A A start					|	Pop
#	A A start					|	Pop
#	A start						|	Pop
#	start						|	start -> expr
#	expr						|	expr -> B
#	B							|	Pop
#	...							|	Accept
#	Note that since this grammar contains Left-recursive rules, an LR parser
#	Wouldn't mind, but LL parsers will pee their pants immediately. That's why
#	the LL parser is mentioned to have infinity lookahead symbols, which is
#	ofc, impossible.
